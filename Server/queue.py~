

try:
        import threading
        except ImportError:
            import dummy_threading as threading
            from collections import deque
            from heapq import heappush, heappop
            from time import monotonic as time

            __all__ = ['Empty', 'Full', 'Queue', 'PriorityQueue', 'LifoQueue']

            class Empty(Exception):
                'Exception raised by Queue.get(block=0)/get_nowait().'
                    pass

                    class Full(Exception):
                        'Exception raised by Queue.put(block=0)/put_nowait().'
                            pass

                            class Queue:
                                '''Create a queue object with a given maximum size.
                                    If maxsize is <= 0, the queue size is infinite.
                                        '''

                                            def __init__(self, maxsize=0):
                                                    self.maxsize = maxsize
                                                            self._init(maxsize)

                                                                    # mutex must be held whenever the queue is mutating.  All methods
                                                                            # that acquire mutex must release it before returning.  mutex
                                                                                    # is shared between the three conditions, so acquiring and
                                                                                            # releasing the conditions also acquires and releases mutex.
                                                                                                    self.mutex = threading.Lock()

                                                                                                            # Notify not_empty whenever an item is added to the queue; a
                                                                                                                    # thread waiting to get is notified then.
                                                                                                                            self.not_empty = threading.Condition(self.mutex)

                                                                                                                                    # Notify not_full whenever an item is removed from the queue;
                                                                                                                                            # a thread waiting to put is notified then.
                                                                                                                                                    self.not_full = threading.Condition(self.mutex)

                                                                                                                                                            # Notify all_tasks_done whenever the number of unfinished tasks
                                                                                                                                                                    # drops to zero; thread waiting to join() is notified to resume
                                                                                                                                                                            self.all_tasks_done = threading.Condition(self.mutex)
                                                                                                                                                                                    self.unfinished_tasks = 0

                                                                                                                                                                                        def task_done(self):
                                                                                                                                                                                                '''Indicate that a formerly enqueued task is complete.
                                                                                                                                                                                                        Used by Queue consumer threads.  For each get() used to fetch a task,
                                                                                                                                                                                                                a subsequent call to task_done() tells the queue that the processing
                                                                                                                                                                                                                        on the task is complete.
                                                                                                                                                                                                                                If a join() is currently blocking, it will resume when all items
                                                                                                                                                                                                                                        have been processed (meaning that a task_done() call was received
                                                                                                                                                                                                                                                        for every item that had been put() into the queue).
                                                                                                                                                                                                                                                Raises a ValueError if called more times than there were items
                                                                                                                                                                                                                                                        placed in the queue.
                                                                                                                                                                                                                                                                '''
                                                                                                                                                                                                                                                                        with self.all_tasks_done:
                                                                                                                                                                                                                                                                                    unfinished = self.unfinished_tasks - 1
                                                                                                                                                                                                                                                                                                if unfinished <= 0:
                                                                                                                                                                                                                                                                                                                if unfinished < 0:
                                                                                                                                                                                                                                                                                                                                    raise ValueError('task_done() called too many times')
                                                                                                                                                                                                                                                                                                                                                    self.all_tasks_done.notify_all()
                                                                                                                                                                                                                                                                                                                                                                self.unfinished_tasks = unfinished

                                                                                                                                                                                                                                                                                                                                                                    def join(self):

